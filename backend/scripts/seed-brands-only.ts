import { NestFactory } from '@nestjs/core';
import { AppModule } from '../src/app.module';
import { ProductsService } from '../src/products/products.service';

async function seedBrandsOnly() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu th√™m th∆∞∆°ng hi·ªáu laptop...');
  
  const app = await NestFactory.createApplicationContext(AppModule);
  const productsService = app.get(ProductsService);

  // Danh s√°ch 10 th∆∞∆°ng hi·ªáu laptop n·ªïi ti·∫øng
  const brands = [
    'Apple',
    'Dell',
    'HP',
    'Asus',
    'Lenovo',
    'MSI',
    'Acer',
    'LG',
    'Gigabyte',
    'Razer'
  ];

  try {
    // L·∫•y danh s√°ch th∆∞∆°ng hi·ªáu hi·ªán c√≥
    const existingBrands = await productsService.getBrands();
    console.log(`üìã C√≥ ${existingBrands.length} th∆∞∆°ng hi·ªáu hi·ªán t·∫°i trong database`);

    // T·∫°o m·ªôt s·∫£n ph·∫©m t·∫°m cho m·ªói th∆∞∆°ng hi·ªáu ƒë·ªÉ brand ƒë∆∞·ª£c l∆∞u v√†o database
    for (const brand of brands) {
      // Ki·ªÉm tra xem brand ƒë√£ t·ªìn t·∫°i ch∆∞a
      const brandExists = existingBrands.some(existingBrand => 
        existingBrand.toLowerCase() === brand.toLowerCase()
      );

      if (brandExists) {
        console.log(`‚ö†Ô∏è  Th∆∞∆°ng hi·ªáu ${brand} ƒë√£ t·ªìn t·∫°i, b·ªè qua...`);
        continue;
      }

      // T·∫°o s·∫£n ph·∫©m t·∫°m ƒë·ªÉ brand ƒë∆∞·ª£c l∆∞u
      const tempProduct = {
        name: `Temp ${brand} Product`,
        description: `Temporary product for ${brand} brand`,
        shortDescription: `Temp ${brand}`,
        price: 1000000,
        brand: brand,
        category: '507f1f77bcf86cd799439011', // ID t·∫°m
        images: [],
        specifications: {
          processor: 'Intel Core i5',
          ram: '8GB',
          storage: '256GB SSD',
          display: '15.6 inch',
          graphics: 'Integrated'
        },
        stock: 0,
        isFeatured: false
      };

      try {
        const product = await productsService.create(tempProduct);
        console.log(`‚úÖ ƒê√£ th√™m th∆∞∆°ng hi·ªáu: ${brand}`);
        
        // X√≥a s·∫£n ph·∫©m t·∫°m ngay sau khi t·∫°o ƒë·ªÉ ch·ªâ gi·ªØ l·∫°i brand
        await productsService.remove((product as any)._id.toString());
        console.log(`üóëÔ∏è  ƒê√£ x√≥a s·∫£n ph·∫©m t·∫°m cho ${brand}`);
      } catch (error) {
        console.log(`‚ùå L·ªói khi th√™m th∆∞∆°ng hi·ªáu ${brand}:`, error.message);
      }
    }

    // Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
    const finalBrands = await productsService.getBrands();
    console.log(`\nüéâ Ho√†n th√†nh! Hi·ªán c√≥ ${finalBrands.length} th∆∞∆°ng hi·ªáu:`);
    finalBrands.forEach(brand => console.log(`   - ${brand}`));

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await app.close();
  }
}

seedBrandsOnly().catch(console.error);
