import { NestFactory } from '@nestjs/core';
import { AppModule } from '../src/app.module';
import { Model } from 'mongoose';
import { Brand, BrandDocument } from '../src/common/schemas/brand.schema';

async function seedBrandsOnly() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu th√™m th∆∞∆°ng hi·ªáu laptop...');
  
  const app = await NestFactory.createApplicationContext(AppModule);
  
  // Th√™m BrandsModule v√†o imports c·ªßa AppModule ho·∫∑c s·ª≠ d·ª•ng tr·ª±c ti·∫øp model
  const brandModel = app.get<Model<BrandDocument>>('BrandModel');

  // Danh s√°ch th∆∞∆°ng hi·ªáu laptop n·ªïi ti·∫øng to√†n c·∫ßu v·ªõi th√¥ng tin chi ti·∫øt
  const brandsData = [
    { name: 'Apple', description: 'Th∆∞∆°ng hi·ªáu c√¥ng ngh·ªá h√†ng ƒë·∫ßu t·ª´ M·ªπ, n·ªïi ti·∫øng v·ªõi MacBook' },
    { name: 'Dell', description: 'Th∆∞∆°ng hi·ªáu m√°y t√≠nh M·ªπ, chuy√™n v·ªÅ laptop doanh nghi·ªáp v√† gaming' },
    { name: 'HP', description: 'Hewlett-Packard, th∆∞∆°ng hi·ªáu m√°y t√≠nh l√¢u ƒë·ªùi v√† uy t√≠n' },
    { name: 'ASUS', description: 'Th∆∞∆°ng hi·ªáu ƒê√†i Loan, n·ªïi ti·∫øng v·ªõi laptop gaming v√† ultrabook' },
    { name: 'Lenovo', description: 'Th∆∞∆°ng hi·ªáu Trung Qu·ªëc, k·∫ø th·ª´a d√≤ng ThinkPad t·ª´ IBM' },
    { name: 'MSI', description: 'Micro-Star International, chuy√™n v·ªÅ laptop gaming cao c·∫•p' },
    { name: 'Acer', description: 'Th∆∞∆°ng hi·ªáu ƒê√†i Loan, ƒëa d·∫°ng t·ª´ laptop vƒÉn ph√≤ng ƒë·∫øn gaming' },
    { name: 'LG', description: 'Th∆∞∆°ng hi·ªáu H√†n Qu·ªëc, n·ªïi ti·∫øng v·ªõi laptop m·ªèng nh·∫π' },
    { name: 'Samsung', description: 'T·∫≠p ƒëo√†n c√¥ng ngh·ªá H√†n Qu·ªëc, laptop thi·∫øt k·∫ø ƒë·∫πp' },
    { name: 'Microsoft', description: 'Th∆∞∆°ng hi·ªáu t·ª´ M·ªπ v·ªõi d√≤ng Surface Book v√† Surface Laptop' },
    { name: 'Razer', description: 'Th∆∞∆°ng hi·ªáu gaming cao c·∫•p t·ª´ Singapore' },
    { name: 'Alienware', description: 'Th∆∞∆°ng hi·ªáu gaming thu·ªôc Dell, thi·∫øt k·∫ø ƒë·ªôc ƒë√°o' },
    { name: 'Gigabyte', description: 'Th∆∞∆°ng hi·ªáu ƒê√†i Loan, chuy√™n v·ªÅ laptop gaming AORUS' },
    { name: 'Huawei', description: 'Th∆∞∆°ng hi·ªáu Trung Qu·ªëc v·ªõi laptop MateBook thi·∫øt k·∫ø ƒë·∫πp' },
    { name: 'Xiaomi', description: 'Th∆∞∆°ng hi·ªáu Trung Qu·ªëc v·ªõi laptop Mi Book gi√° t·ªët' },
    { name: 'Vaio', description: 'Th∆∞∆°ng hi·ªáu laptop cao c·∫•p t·ª´ Nh·∫≠t B·∫£n' },
    { name: 'Framework', description: 'Th∆∞∆°ng hi·ªáu laptop modular c√≥ th·ªÉ n√¢ng c·∫•p' },
    { name: 'System76', description: 'Th∆∞∆°ng hi·ªáu laptop Linux t·ª´ M·ªπ' },
    { name: 'Origin PC', description: 'Th∆∞∆°ng hi·ªáu laptop gaming t√πy ch·ªânh cao c·∫•p' },
    { name: 'Toshiba', description: 'Th∆∞∆°ng hi·ªáu laptop Nh·∫≠t B·∫£n l√¢u ƒë·ªùi' },
    { name: 'Fujitsu', description: 'Th∆∞∆°ng hi·ªáu laptop doanh nghi·ªáp t·ª´ Nh·∫≠t B·∫£n' },
    { name: 'Panasonic', description: 'Th∆∞∆°ng hi·ªáu laptop b·ªÅn b·ªâ Toughbook t·ª´ Nh·∫≠t B·∫£n' }
  ];

  try {
    // Ki·ªÉm tra s·ªë l∆∞·ª£ng brands hi·ªán c√≥
    const existingBrands = await brandModel.find().countDocuments();
    console.log(`üìã C√≥ ${existingBrands} th∆∞∆°ng hi·ªáu hi·ªán t·∫°i trong database`);

    let addedCount = 0;
    let skippedCount = 0;

    // Th√™m t·ª´ng th∆∞∆°ng hi·ªáu
    for (const brandData of brandsData) {
      try {
        // Ki·ªÉm tra xem brand ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingBrand = await brandModel.findOne({ 
          name: { $regex: new RegExp(`^${brandData.name}$`, 'i') } 
        });

        if (existingBrand) {
          console.log(`‚ö†Ô∏è  Th∆∞∆°ng hi·ªáu ${brandData.name} ƒë√£ t·ªìn t·∫°i, b·ªè qua...`);
          skippedCount++;
          continue;
        }

        // T·∫°o slug t·ª´ t√™n
        const slug = brandData.name
          .toLowerCase()
          .replace(/[^a-z0-9 -]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim();

        // T·∫°o brand m·ªõi
        const newBrand = new brandModel({
          name: brandData.name,
          slug: slug,
          description: brandData.description,
          isActive: true,
          productCount: 0
        });

        await newBrand.save();
        console.log(`‚úÖ ƒê√£ th√™m th∆∞∆°ng hi·ªáu: ${brandData.name}`);
        addedCount++;

      } catch (error) {
        console.log(`‚ùå L·ªói khi th√™m th∆∞∆°ng hi·ªáu ${brandData.name}:`, error.message);
      }
    }

    // Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
    const finalBrands = await brandModel.find({ isActive: true }).sort({ name: 1 });
    console.log(`\nüéâ Ho√†n th√†nh!`);
    console.log(`üìä Th·ªëng k√™:`);
    console.log(`   - ƒê√£ th√™m: ${addedCount} th∆∞∆°ng hi·ªáu`);
    console.log(`   - ƒê√£ b·ªè qua: ${skippedCount} th∆∞∆°ng hi·ªáu`);
    console.log(`   - T·ªïng c·ªông: ${finalBrands.length} th∆∞∆°ng hi·ªáu trong database`);
    
    console.log(`\nüìã Danh s√°ch th∆∞∆°ng hi·ªáu:`);
    finalBrands.forEach((brand, index) => console.log(`   ${index + 1}. ${brand.name}`));

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await app.close();
  }
}

seedBrandsOnly().catch(console.error);
